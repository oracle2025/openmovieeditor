// generated by Fast Light User Interface Designer (fluid) version 1.0106

#include "nle.h"

inline void NleUI::cb_Save_i(Fl_Menu_*, void*) {
  nle::Project::write_project();
nle::Renderer a("/home/oracle/t.mov");
a.go();
}
void NleUI::cb_Save(Fl_Menu_* o, void* v) {
  ((NleUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

Fl_Menu_Item NleUI::menu_[] = {
 {"&File", 0,  0, 0, 64, 0, 0, 14, 56},
 {"New", 0,  0, 0, 0, 0, 0, 14, 56},
 {"Open...", 0,  0, 0, 128, 0, 0, 14, 56},
 {"Save", 0,  (Fl_Callback*)NleUI::cb_Save, 0, 0, 0, 0, 14, 56},
 {"Save as...", 0,  0, 0, 128, 0, 0, 14, 56},
 {"Quit", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

inline void NleUI::cb__i(Fl_Button*, void*) {
  m_videoView->play();
}
void NleUI::cb_(Fl_Button* o, void* v) {
  ((NleUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

inline void NleUI::cb_1_i(Fl_Button*, void*) {
  m_videoView->stop();
}
void NleUI::cb_1(Fl_Button* o, void* v) {
  ((NleUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

inline void NleUI::cb_fileBrowser_i(nle::FileBrowser* o, void*) {
  nle::FileBrowser *fb = (nle::FileBrowser*)o;
fb->load_rel();
}
void NleUI::cb_fileBrowser(nle::FileBrowser* o, void* v) {
  ((NleUI*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_fileBrowser_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_tool_positioning[] = {
"32 32 2 1",
" \tc None",
".\tc #000000",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"       .                .       ",
"      ..                ..      ",
"     ...                ...     ",
"    ....                ....    ",
"   ..........................   ",
"    ....                ....    ",
"     ...                ...     ",
"      ..                ..      ",
"       .                .       ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                ",
"                                "
};
static Fl_Pixmap image_tool_positioning(idata_tool_positioning);

static const char *idata_tool_automations[] = {
"32 32 2 1",
" \tc None",
".\tc #000000",
"                                ",
"                                ",
"                                ",
"                                ",
"                .               ",
"               ...              ",
"              .....             ",
"             .......            ",
"            .........           ",
"                .               ",
"                .               ",
"                .               ",
"                .               ",
"                                ",
"                  .             ",
"              .....             ",
"              .....             ",
"              .....             ",
"              .....             ",
"             ......             ",
"                                ",
"                .               ",
"                .               ",
"                .               ",
"                .               ",
"            .........           ",
"             .......            ",
"              .....             ",
"               ...              ",
"                .               ",
"                                ",
"                                "
};
static Fl_Pixmap image_tool_automations(idata_tool_automations);

inline void NleUI::cb_scaleBar_i(Flmm_Scalebar* o, void*) {
  Flmm_Scalebar *sb = (Flmm_Scalebar *)o;
float width = sb->w();
float slider_size = sb->slider_size_i();
float zoom = width / slider_size;
m_timelineView->scroll( (int64_t)sb->value() );
m_timelineView->zoom( zoom );
}
void NleUI::cb_scaleBar(Flmm_Scalebar* o, void* v) {
  ((NleUI*)(o->parent()->user_data()))->cb_scaleBar_i(o,v);
}

static const char *idata_trash[] = {
"16 16 4 1",
" \tc None",
".\tc #000000",
"+\tc #B3B3B3",
"@\tc #404040",
"     .......    ",
"   ...+++++...  ",
"  ..+++...+++.. ",
" ..+++.+++.+++..",
" ..+++++++++++..",
"  ..+++++++++.. ",
"  ....+++++.... ",
"  .++.......++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  ..+@++@++@+.. ",
"   ...++@++...  ",
"     .......    "
};
static Fl_Pixmap image_trash(idata_trash);

NleUI::NleUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = mainWindow = new Fl_Double_Window(515, 400, "MovieEditor");
    w = o;
    o->user_data((void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 515, 25);
      o->menu(menu_);
    }
    { Fl_Tile* o = new Fl_Tile(0, 25, 515, 335);
      { Fl_Group* o = new Fl_Group(0, 25, 515, 175);
        { Fl_Group* o = new Fl_Group(275, 25, 240, 175);
          { nle::VideoViewGL* o = m_videoView = new nle::VideoViewGL(275, 25, 240, 150, "VideoView");
            o->box(FL_DOWN_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_GRAY0);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
            Fl_Group::current()->resizable(o);
          }
          { Fl_Button* o = new Fl_Button(395, 175, 60, 25, "@>");
            o->callback((Fl_Callback*)cb_);
          }
          new Fl_Button(455, 175, 60, 25, "@>|");
          new Fl_Button(275, 175, 60, 25, "@|<");
          { Fl_Button* o = new Fl_Button(335, 175, 60, 25, "@||");
            o->callback((Fl_Callback*)cb_1);
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(0, 25, 280, 175);
          { Fl_Tabs* o = new Fl_Tabs(45, 25, 230, 175);
            o->box(FL_UP_BOX);
            o->labelcolor(FL_GRAY0);
            { Fl_Group* o = new Fl_Group(45, 50, 230, 150, "Project");
              o->hide();
              { Fl_Value_Input* o = new Fl_Value_Input(105, 60, 55, 25, "Width");
                o->maximum(1024);
                o->step(1);
                o->value(640);
              }
              { Fl_Value_Input* o = new Fl_Value_Input(105, 90, 55, 25, "Height");
                o->maximum(768);
                o->step(1);
                o->value(480);
              }
              { Fl_Box* o = new Fl_Box(175, 120, 55, 80);
                Fl_Group::current()->resizable(o);
              }
              o->end();
              Fl_Group::current()->resizable(o);
            }
            { Fl_Group* o = new Fl_Group(45, 50, 230, 150, "Files");
              { nle::FileBrowser* o = fileBrowser = new nle::FileBrowser(50, 55, 220, 140);
                o->box(FL_NO_BOX);
                o->color(FL_BACKGROUND2_COLOR);
                o->selection_color(FL_SELECTION_COLOR);
                o->labeltype(FL_NORMAL_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_BLACK);
                o->callback((Fl_Callback*)cb_fileBrowser);
                o->align(FL_ALIGN_BOTTOM);
                o->when(FL_WHEN_RELEASE_ALWAYS);
                Fl_Group::current()->resizable(o);
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(45, 50, 230, 150, "Object Inspector");
              o->hide();
              { Fl_Menu_Button* o = new Fl_Menu_Button(120, 55, 150, 25, "Font");
                o->align(FL_ALIGN_LEFT);
              }
              { Fl_Value_Input* o = new Fl_Value_Input(120, 85, 150, 25, "Font Size");
                o->maximum(40);
                o->step(1);
              }
              { Fl_Text_Editor* o = new Fl_Text_Editor(120, 115, 150, 80, "Text");
                o->align(FL_ALIGN_LEFT);
                Fl_Group::current()->resizable(o);
              }
              o->end();
            }
            o->end();
            Fl_Group::current()->resizable(o);
          }
          { Fl_Group* o = new Fl_Group(0, 25, 45, 175);
            o->box(FL_UP_BOX);
            o->labelsize(12);
            { Fl_Box* o = new Fl_Box(5, 47, 36, 68);
              o->box(FL_DOWN_BOX);
            }
            { Fl_Button* o = new Fl_Button(7, 49, 32, 32);
              o->tooltip("Positioning");
              o->type(102);
              o->value(1);
              o->image(image_tool_positioning);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            }
            { Fl_Button* o = new Fl_Button(7, 81, 32, 32);
              o->tooltip("Automations");
              o->type(102);
              o->image(image_tool_automations);
              o->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
            }
            { Fl_Box* o = new Fl_Box(10, 135, 25, 25);
              Fl_Group::current()->resizable(o);
            }
            { Fl_Box* o = new Fl_Box(0, 25, 45, 25, "Tools");
              o->labelsize(12);
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 200, 515, 160);
        { nle::Ruler* o = new nle::Ruler(0, 200, 515, 25, "Ruler");
          o->box(FL_UP_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_BLACK);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          o->when(FL_WHEN_RELEASE);
        }
        { nle::TimelineView* o = m_timelineView = new nle::TimelineView(0, 225, 515, 135);
          o->box(FL_NO_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_BLACK);
          o->align(FL_ALIGN_CENTER);
          o->when(2);
          Fl_Group::current()->resizable(o);
        }
        o->end();
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { Flmm_Scalebar* o = scaleBar = new Flmm_Scalebar(0, 360, 515, 20);
      o->type(1);
      o->box(FL_FLAT_BOX);
      o->color(FL_DARK2);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_BLACK);
      o->maximum(1024);
      o->slider_size(0.40404);
      o->callback((Fl_Callback*)cb_scaleBar);
      o->align(FL_ALIGN_BOTTOM);
      o->when(FL_WHEN_CHANGED);
    }
    { Fl_Group* o = new Fl_Group(0, 380, 515, 20);
      o->box(FL_ENGRAVED_BOX);
      { Fl_Box* o = trashCan = new Fl_Box(490, 380, 25, 20);
        o->box(FL_UP_BOX);
        o->image(image_trash);
      }
      { Fl_Box* o = new Fl_Box(330, 385, 25, 15);
        Fl_Group::current()->resizable(o);
      }
      o->end();
    }
    o->end();
  }
}

void NleUI::show( int argc, char **argv ) {
  g_scrollBar = scaleBar;
g_trashCan = trashCan;
scaleBar->slider_size_i(300);
mainWindow->show(argc, argv);
}
Flmm_Scalebar* g_scrollBar;

Fl_Menu_Item EncodeDialog::menu_Audio[] = {
 {"aa", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

EncodeDialog::EncodeDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = encodeDialog = new Fl_Double_Window(325, 145);
    w = o;
    o->user_data((void*)(this));
    { Fl_Menu_Button* o = new Fl_Menu_Button(110, 25, 200, 25, "Audio Codec");
      o->align(FL_ALIGN_LEFT);
      o->menu(menu_Audio);
    }
    { Fl_Menu_Button* o = new Fl_Menu_Button(110, 55, 200, 25, "Video Codec");
      o->align(FL_ALIGN_LEFT);
    }
    new Fl_Return_Button(170, 110, 140, 25, "Encode");
    new Fl_Button(15, 110, 140, 25, "Cancel");
    o->end();
  }
}

ChangesDialog::ChangesDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(410, 80, "Unsaved changes!");
    w = o;
    o->user_data((void*)(this));
    new Fl_Box(5, 10, 385, 25, "Save changes?");
    new Fl_Button(5, 50, 120, 25, "Don\'t Save");
    new Fl_Button(160, 50, 120, 25, "Cancel");
    new Fl_Return_Button(285, 50, 120, 25, "Save");
    o->end();
  }
}
Fl_Box *g_trashCan;
