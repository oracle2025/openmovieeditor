// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "ScaleCropTiltDialog.H"

void ScaleCropTiltDialog::cb_scale_x_i(Fl_Slider* o, void*) {
  m_filter->m_scale_x = (int)INT_FLOAT_SCALE*o->value();
scale_h_spin->value(100*o->value());

if ( scale_lock->value() ) {
	scale_y->value( o->value() );
	m_filter->m_scale_y = (int)INT_FLOAT_SCALE*o->value();
	scale_v_spin->value(100*o->value());
}

nle::g_videoView->redraw();
}
void ScaleCropTiltDialog::cb_scale_x(Fl_Slider* o, void* v) {
  ((ScaleCropTiltDialog*)(o->parent()->user_data()))->cb_scale_x_i(o,v);
}

void ScaleCropTiltDialog::cb_scale_y_i(Fl_Slider* o, void*) {
  m_filter->m_scale_y = (int)INT_FLOAT_SCALE*o->value();
scale_v_spin->value(100*o->value());
if ( scale_lock->value() ) {
	scale_x->value( o->value() );
	m_filter->m_scale_x = (int)INT_FLOAT_SCALE*o->value();
	scale_h_spin->value(100*o->value());
}
nle::g_videoView->redraw();
}
void ScaleCropTiltDialog::cb_scale_y(Fl_Slider* o, void* v) {
  ((ScaleCropTiltDialog*)(o->parent()->user_data()))->cb_scale_y_i(o,v);
}

void ScaleCropTiltDialog::cb_crop_left_i(Fl_Slider* o, void*) {
  m_filter->m_crop_left = (int)INT_FLOAT_SCALE*o->value();

if ( crop_x_lock->value() ) {
	crop_right->value( o->value() );
	m_filter->m_crop_right = (int)INT_FLOAT_SCALE*o->value();
}

nle::g_videoView->redraw();
}
void ScaleCropTiltDialog::cb_crop_left(Fl_Slider* o, void* v) {
  ((ScaleCropTiltDialog*)(o->parent()->user_data()))->cb_crop_left_i(o,v);
}

void ScaleCropTiltDialog::cb_crop_right_i(Fl_Slider* o, void*) {
  m_filter->m_crop_right = (int)INT_FLOAT_SCALE*o->value();
if ( crop_x_lock->value() ) {
	crop_left->value( o->value() );
	m_filter->m_crop_left = (int)INT_FLOAT_SCALE*o->value();
}
nle::g_videoView->redraw();
}
void ScaleCropTiltDialog::cb_crop_right(Fl_Slider* o, void* v) {
  ((ScaleCropTiltDialog*)(o->parent()->user_data()))->cb_crop_right_i(o,v);
}

void ScaleCropTiltDialog::cb_crop_top_i(Fl_Slider* o, void*) {
  m_filter->m_crop_top = (int)INT_FLOAT_SCALE*o->value();
if ( crop_y_lock->value() ) {
	crop_bottom->value( o->value() );
	m_filter->m_crop_bottom = (int)INT_FLOAT_SCALE*o->value();
}
nle::g_videoView->redraw();
}
void ScaleCropTiltDialog::cb_crop_top(Fl_Slider* o, void* v) {
  ((ScaleCropTiltDialog*)(o->parent()->user_data()))->cb_crop_top_i(o,v);
}

void ScaleCropTiltDialog::cb_crop_bottom_i(Fl_Slider* o, void*) {
  m_filter->m_crop_bottom = (int)INT_FLOAT_SCALE*o->value();
if ( crop_y_lock->value() ) {
	crop_top->value( o->value() );
	m_filter->m_crop_top = (int)INT_FLOAT_SCALE*o->value();
}
nle::g_videoView->redraw();
}
void ScaleCropTiltDialog::cb_crop_bottom(Fl_Slider* o, void* v) {
  ((ScaleCropTiltDialog*)(o->parent()->user_data()))->cb_crop_bottom_i(o,v);
}

void ScaleCropTiltDialog::cb_tilt_x_i(Fl_Slider* o, void*) {
  m_filter->m_tilt_x = (int)INT_FLOAT_SCALE*o->value();
nle::g_videoView->redraw();
}
void ScaleCropTiltDialog::cb_tilt_x(Fl_Slider* o, void* v) {
  ((ScaleCropTiltDialog*)(o->parent()->user_data()))->cb_tilt_x_i(o,v);
}

void ScaleCropTiltDialog::cb_tilt_y_i(Fl_Slider* o, void*) {
  m_filter->m_tilt_y = (int)INT_FLOAT_SCALE*o->value();
nle::g_videoView->redraw();
}
void ScaleCropTiltDialog::cb_tilt_y(Fl_Slider* o, void* v) {
  ((ScaleCropTiltDialog*)(o->parent()->user_data()))->cb_tilt_y_i(o,v);
}

ScaleCropTiltDialog::ScaleCropTiltDialog( nle::ScaleCropTiltFilter* filter ) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = m_dialog = new Fl_Double_Window(420, 290, "Scale Crop Tilt");
    w = o;
    o->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(5, 20, 410, 75, "Scale");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = new Fl_Box(5, 115, 410, 75, "Crop");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = new Fl_Box(5, 210, 410, 75, "Tilt");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Slider* o = scale_x = new Fl_Slider(35, 30, 285, 25, "@<->");
      o->type(5);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_scale_x);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Slider* o = scale_y = new Fl_Slider(35, 60, 285, 25, "@2<->");
      o->type(5);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_scale_y);
      o->align(FL_ALIGN_LEFT);
    }
    scale_h_spin = new Fl_Spinner(320, 30, 65, 25);
    scale_v_spin = new Fl_Spinner(320, 60, 65, 25);
    { Fl_Slider* o = crop_left = new Fl_Slider(35, 125, 175, 25, "@<->");
      o->type(5);
      o->callback((Fl_Callback*)cb_crop_left);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Slider* o = crop_right = new Fl_Slider(210, 125, 175, 25);
      o->type(5);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_crop_right);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Slider* o = crop_top = new Fl_Slider(35, 155, 175, 25, "@2<->");
      o->type(5);
      o->callback((Fl_Callback*)cb_crop_top);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Slider* o = crop_bottom = new Fl_Slider(210, 155, 175, 25);
      o->type(5);
      o->minimum(1);
      o->maximum(0);
      o->callback((Fl_Callback*)cb_crop_bottom);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Slider* o = tilt_x = new Fl_Slider(35, 220, 305, 25, "@<->");
      o->type(5);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_tilt_x);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Slider* o = tilt_y = new Fl_Slider(35, 250, 305, 25, "@2<->");
      o->type(5);
      o->minimum(-1);
      o->callback((Fl_Callback*)cb_tilt_y);
      o->align(FL_ALIGN_LEFT);
    }
    new Fl_Spinner(340, 220, 65, 25);
    new Fl_Spinner(340, 250, 65, 25);
    { Fl_Light_Button* o = scale_lock = new Fl_Light_Button(390, 30, 15, 55);
      o->tooltip("Connect");
      o->value(1);
    }
    { Fl_Light_Button* o = crop_x_lock = new Fl_Light_Button(390, 125, 15, 25);
      o->tooltip("Connect");
    }
    { Fl_Light_Button* o = crop_y_lock = new Fl_Light_Button(390, 155, 15, 25);
      o->tooltip("Connect");
    }
    o->end();
  }
  m_filter = filter;
}

ScaleCropTiltDialog::~ScaleCropTiltDialog() {
  m_filter->m_dialog = 0;
m_dialog->hide();
delete m_dialog;
}

void ScaleCropTiltDialog::show() {
  m_dialog->show();
}

int ScaleCropTiltDialog::shown() {
  return m_dialog->shown();
}
