// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "NodeFilterDialog.H"
#include "NodeFilterFrei0rFactoryPlugin.H"

void NodeFilterDialog::cb_graph_editor_i(Frei0rGraphEditor*, void*) {
  nle::g_videoView->redraw();
nle::g_timeline->changing();
}
void NodeFilterDialog::cb_graph_editor(Frei0rGraphEditor* o, void* v) {
  ((NodeFilterDialog*)(o->parent()->parent()->user_data()))->cb_graph_editor_i(o,v);
}

void NodeFilterDialog::cb_plugin_browser_i(Fl_Hold_Browser* o, void*) {
  if ( o->value() <= 0 ) {
	return;
}
INodeFilterFactoryPlugin* ffp = (INodeFilterFactoryPlugin*)o->data(o->value());
if ( ffp ) {
	graph_editor->addNode( ffp );
};
}
void NodeFilterDialog::cb_plugin_browser(Fl_Hold_Browser* o, void* v) {
  ((NodeFilterDialog*)(o->parent()->parent()->user_data()))->cb_plugin_browser_i(o,v);
}

void NodeFilterDialog::cb_Close_i(Fl_Return_Button*, void*) {
  delete this;
}
void NodeFilterDialog::cb_Close(Fl_Return_Button* o, void* v) {
  ((NodeFilterDialog*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_trash[] = {
"16 16 4 1",
" \tc None",
".\tc #000000",
"+\tc #B3B3B3",
"@\tc #404040",
"     .......    ",
"   ...+++++...  ",
"  ..+++...+++.. ",
" ..+++.+++.+++..",
" ..+++++++++++..",
"  ..+++++++++.. ",
"  ....+++++.... ",
"  .++.......++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  .++@++@++@++. ",
"  ..+@++@++@+.. ",
"   ...++@++...  ",
"     .......    "
};
static Fl_Pixmap image_trash(idata_trash);

NodeFilterDialog::NodeFilterDialog( nle::NodeFilter* filter ) {
  Fl_Double_Window* w;
  m_factory = g_node_filter_frei0r_factory;
  { Fl_Double_Window* o = m_dialog = new Fl_Double_Window(650, 495, "Node Editor");
    w = o;
    o->user_data((void*)(this));
    { Fl_Tile* o = new Fl_Tile(5, 55, 640, 375);
      { Frei0rGraphEditor* o = graph_editor = new Frei0rGraphEditor(285, 55, 360, 375);
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_graph_editor);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Hold_Browser* o = plugin_browser = new Fl_Hold_Browser(5, 55, 280, 375);
        o->box(FL_NO_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_plugin_browser);
        o->align(FL_ALIGN_BOTTOM);
        o->when(FL_WHEN_RELEASE_ALWAYS);
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { Fl_Box* o = new Fl_Box(0, 0, 650, 50, "Node Editor");
      o->labelfont(1);
      o->labelsize(16);
    }
    { Fl_Return_Button* o = new Fl_Return_Button(5, 465, 640, 25, "Close");
      o->callback((Fl_Callback*)cb_Close);
    }
    { Fl_Check_Button* o = new Fl_Check_Button(5, 435, 615, 25, "Bypass");
      o->down_box(FL_DOWN_BOX);
    }
    { Fl_Button* o = trash_can = new Fl_Button(620, 435, 25, 25);
      o->image(image_trash);
    }
    o->end();
  }
  m_filter = filter;
plugin_browser->add( m_bezier_curve_factory.name(), (void*)&m_bezier_curve_factory );
for ( effect_node* p = m_factory->m_effects; p; p = p->next ) {
	plugin_browser->add( p->effect->name(), (void*)p->effect );
}
graph_editor->m_trash = trash_can;
graph_editor->setFilter( m_filter );
}

NodeFilterDialog::~NodeFilterDialog() {
  m_filter->m_dialog = 0;
m_dialog->hide();
delete m_dialog;
}

void NodeFilterDialog::show() {
  m_dialog->show();
}

int NodeFilterDialog::shown() {
  return m_dialog->shown();
}
