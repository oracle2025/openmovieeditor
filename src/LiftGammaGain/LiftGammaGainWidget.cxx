// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "LiftGammaGainWidget.H"

void LiftGammaGainWidget::cb_lift_i(Fl_Hsv_Color_Chooser*, void*) {
  if (m_dialog) m_dialog->read_values();
}
void LiftGammaGainWidget::cb_lift(Fl_Hsv_Color_Chooser* o, void* v) {
  ((LiftGammaGainWidget*)(o->parent()->parent()))->cb_lift_i(o,v);
}

void LiftGammaGainWidget::cb_lift_slider_i(Fl_Value_Slider*, void*) {
  if (m_dialog) m_dialog->read_values();
}
void LiftGammaGainWidget::cb_lift_slider(Fl_Value_Slider* o, void* v) {
  ((LiftGammaGainWidget*)(o->parent()->parent()))->cb_lift_slider_i(o,v);
}

void LiftGammaGainWidget::cb_gamma_i(Fl_Hsv_Color_Chooser*, void*) {
  if (m_dialog) m_dialog->read_values();
}
void LiftGammaGainWidget::cb_gamma(Fl_Hsv_Color_Chooser* o, void* v) {
  ((LiftGammaGainWidget*)(o->parent()->parent()))->cb_gamma_i(o,v);
}

void LiftGammaGainWidget::cb_gamma_slider_i(Fl_Value_Slider*, void*) {
  if (m_dialog) m_dialog->read_values();
}
void LiftGammaGainWidget::cb_gamma_slider(Fl_Value_Slider* o, void* v) {
  ((LiftGammaGainWidget*)(o->parent()->parent()))->cb_gamma_slider_i(o,v);
}

void LiftGammaGainWidget::cb_gain_i(Fl_Hsv_Color_Chooser*, void*) {
  if (m_dialog) m_dialog->read_values();
}
void LiftGammaGainWidget::cb_gain(Fl_Hsv_Color_Chooser* o, void* v) {
  ((LiftGammaGainWidget*)(o->parent()->parent()))->cb_gain_i(o,v);
}

void LiftGammaGainWidget::cb_gain_slider_i(Fl_Value_Slider*, void*) {
  if (m_dialog) m_dialog->read_values();
}
void LiftGammaGainWidget::cb_gain_slider(Fl_Value_Slider* o, void* v) {
  ((LiftGammaGainWidget*)(o->parent()->parent()))->cb_gain_slider_i(o,v);
}
LiftGammaGainWidget::LiftGammaGainWidget(int X, int Y, int W, int H, const char *L)
  : Fl_Group(X, Y, W, H, L) {
{ Fl_Group* o = new Fl_Group(0, 0, 195, 165);
  { lift = new Fl_Hsv_Color_Chooser(0, 25, 195, 115);
    lift->box(FL_THIN_DOWN_BOX);
    lift->color(FL_BACKGROUND_COLOR);
    lift->selection_color(FL_BACKGROUND_COLOR);
    lift->labeltype(FL_NORMAL_LABEL);
    lift->labelfont(0);
    lift->labelsize(14);
    lift->labelcolor(FL_FOREGROUND_COLOR);
    lift->callback((Fl_Callback*)cb_lift);
    lift->align(FL_ALIGN_CENTER);
    lift->when(FL_WHEN_RELEASE);
    Fl_Group::current()->resizable(lift);
  } // Fl_Hsv_Color_Chooser* lift
  { Fl_Box* o = new Fl_Box(0, 0, 195, 25, "Lift");
    o->box(FL_THIN_UP_BOX);
  } // Fl_Box* o
  { lift_slider = new Fl_Value_Slider(0, 140, 195, 25);
    lift_slider->type(5);
    lift_slider->step(0.001);
    lift_slider->value(0.5);
    lift_slider->callback((Fl_Callback*)cb_lift_slider);
  } // Fl_Value_Slider* lift_slider
  o->end();
} // Fl_Group* o
{ Fl_Group* o = new Fl_Group(195, 0, 195, 165);
  { gamma = new Fl_Hsv_Color_Chooser(195, 25, 195, 115);
    gamma->box(FL_THIN_DOWN_BOX);
    gamma->color(FL_BACKGROUND_COLOR);
    gamma->selection_color(FL_BACKGROUND_COLOR);
    gamma->labeltype(FL_NORMAL_LABEL);
    gamma->labelfont(0);
    gamma->labelsize(14);
    gamma->labelcolor(FL_FOREGROUND_COLOR);
    gamma->callback((Fl_Callback*)cb_gamma);
    gamma->align(FL_ALIGN_CENTER);
    gamma->when(FL_WHEN_RELEASE);
    Fl_Group::current()->resizable(gamma);
  } // Fl_Hsv_Color_Chooser* gamma
  { Fl_Box* o = new Fl_Box(195, 0, 195, 25, "Gamma");
    o->box(FL_THIN_UP_BOX);
  } // Fl_Box* o
  { gamma_slider = new Fl_Value_Slider(195, 140, 195, 25);
    gamma_slider->type(5);
    gamma_slider->step(0.001);
    gamma_slider->value(0.5);
    gamma_slider->callback((Fl_Callback*)cb_gamma_slider);
  } // Fl_Value_Slider* gamma_slider
  o->end();
} // Fl_Group* o
{ Fl_Group* o = new Fl_Group(390, 0, 195, 165);
  { gain = new Fl_Hsv_Color_Chooser(390, 25, 195, 115);
    gain->box(FL_THIN_DOWN_BOX);
    gain->color(FL_BACKGROUND_COLOR);
    gain->selection_color(FL_BACKGROUND_COLOR);
    gain->labeltype(FL_NORMAL_LABEL);
    gain->labelfont(0);
    gain->labelsize(14);
    gain->labelcolor(FL_FOREGROUND_COLOR);
    gain->callback((Fl_Callback*)cb_gain);
    gain->align(FL_ALIGN_CENTER);
    gain->when(FL_WHEN_RELEASE);
    Fl_Group::current()->resizable(gain);
  } // Fl_Hsv_Color_Chooser* gain
  { Fl_Box* o = new Fl_Box(390, 0, 195, 25, "Gain");
    o->box(FL_THIN_UP_BOX);
  } // Fl_Box* o
  { gain_slider = new Fl_Value_Slider(390, 140, 195, 25);
    gain_slider->type(5);
    gain_slider->step(0.001);
    gain_slider->value(0.5);
    gain_slider->callback((Fl_Callback*)cb_gain_slider);
  } // Fl_Value_Slider* gain_slider
  o->end();
} // Fl_Group* o
end();
resizable(this);
}
