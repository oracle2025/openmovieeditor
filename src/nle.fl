# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
header_name {.h} 
code_name {.cxx}
class NleUI {open
} {
  Function {NleUI()} {open
  } {
    Fl_Window mainWindow {
      label {Open Movie Editor}
      callback {if (Fl::event()==FL_SHORTCUT && Fl::event_key()==FL_Escape) 
    return; // ignore Escape
mainWindow->hide();} open
      private xywh {664 271 515 465} type Double resizable visible
    } {
      Fl_Menu_Bar {} {open
        xywh {0 0 345 25}
      } {
        Submenu {} {
          label {&Project}
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {New Project}
            callback {nle::g_loadSaveManager->newProject();}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Save as...}
            callback {nle::g_loadSaveManager->saveAs();}
            xywh {0 0 100 20} shortcut 0x50073 divider
          }
          MenuItem {} {
            label {Render...}
            callback {Fl_Group::current( mainWindow );
nle::CodecParameters cp( nle::g_audio_codec_info, nle::g_video_codec_info );
EncodeDialog dlg( 0, 0, &cp );
dlg.show();
while (dlg.shown())
  Fl::wait();

if ( dlg.go && strcmp( "", dlg.export_filename->value() ) != 0 ) {
	ProgressDialog pDlg( "Rendering Project" );
	render_frame_size* fs = (render_frame_size*)dlg.frameSize();
	nle::Renderer ren( dlg.export_filename->value(), fs->x, fs->y, 25, 48000, &cp );

	/* stop playback before starting to render... */
	g_playButton->label( "@>" );
	m_videoView->stop();
	lastButton->activate();
	firstButton->activate();
	forwardButton->activate();
	backButton->activate();

	ren.go( &pDlg );
	

//	pDlg.progressDialog->show();
//	while ( pDlg.progressDialog->shown() )
//		Fl::wait();
//	pDlg.progressDialog->hide();
}}
            xywh {5 5 100 20} divider
            code0 {\#include "ProgressDialog/ProgressDialog.h"}
            code1 {\#include "Renderer.H"}
            code2 {\#include "Codecs.H"}
          }
          MenuItem {} {
            label Quit
            callback {m_videoView->stop();
o->window()->hide();}
            xywh {5 5 100 20} shortcut 0x40071
          }
        }
        Submenu {} {
          label {&Edit} open
          xywh {0 0 100 20}
        } {
          MenuItem undo_item {
            label Undo
            callback {m_timelineView->clear_selection();
nle::g_docManager->undo();
m_timelineView->redraw();}
            xywh {0 0 100 20} shortcut 0x4007a deactivate
            code0 {\#include "DocManager.H"}
          }
          MenuItem redo_item {
            label Redo
            callback {m_timelineView->clear_selection();
nle::g_docManager->redo();
m_timelineView->redraw();}
            xywh {0 0 100 20} shortcut 0x40079 deactivate
            code0 {\#include "DocManager.H"}
          }
        }
        Submenu {} {
          label {&Tracks} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {Add Video Track}
            callback {m_timelineView->add_track( nle::TRACK_TYPE_VIDEO );}
            xywh {0 0 100 20}
            code0 {\#include "Timeline.H"}
            code1 {\#include "VideoTrack.H"}
          }
          MenuItem {} {
            label {Add Audio Track}
            callback {m_timelineView->add_track( nle::TRACK_TYPE_AUDIO );}
            xywh {0 0 100 20}
            code0 {\#include "Timeline.H"}
            code1 {\#include "AudioTrack.H"}
          }
        }
        Submenu {} {
          label {&JACK} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label {Transport connect}
            callback {// FIXME: allow change only if not currently playing ?!
// -> assign this value in SimplePlaybackCore "on play"
g_use_jack_transport = (o->mvalue())->value();}
            xywh {0 0 100 20} type Toggle value 1
          }
          MenuItem {} {
            label {Scrub audio}
            callback {g_scrub_audio = (o->mvalue())->value();}
            xywh {0 0 100 20} type Toggle value 1
          }
        }
        Submenu {} {
          label {&View} open
          xywh {0 0 100 20}
        } {
          MenuItem {} {
            label Fullscreen
            callback {static bool fullscreen_on = false;
static int x;
static int y;
static int w;
static int h;
if ( fullscreen_on ) {
	mainWindow->fullscreen_off( x, y, w, h );
	fullscreen_on = false;
} else {
	x = mainWindow->x();
	y = mainWindow->y();
	w = mainWindow->w();
	h = mainWindow->h();
	mainWindow->fullscreen();
	fullscreen_on = true;
}}
            xywh {0 0 100 20} shortcut 0xffc8
          }
          MenuItem {} {
            label {Track Overview}
            xywh {0 0 100 20} type Toggle hide
          }
        }
        Submenu {} {
          label {P&references}
          xywh {0 0 100 20} hide
        } {
          MenuItem {} {
            label {No SW Scaling}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {2x2 Scaling good}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {2x2 Scaling bad}
            xywh {0 0 100 20}
          }
        }
        Submenu {} {
          label {&Help}
          xywh {10 10 100 20}
        } {
          MenuItem {} {
            label {About...}
            callback {AboutDialog dlg;
dlg.show();
while (dlg.shown())
  Fl::wait();}
            xywh {10 10 100 20}
          }
        }
      }
      Fl_Tile {} {open
        xywh {0 25 515 440} resizable
      } {
        Fl_Tile {} {open
          xywh {0 25 515 250}
        } {
          Fl_Group {} {open
            xywh {280 25 235 250}
          } {
            Fl_Box m_videoView {
              label VideoView
              xywh {280 25 235 250} box DOWN_BOX labelcolor 32 resizable
              code0 {\#include "VideoViewGL.H"}
              class {nle::VideoViewGL}
            }
          }
          Fl_Group {} {open
            xywh {0 25 280 250}
          } {
            Fl_Tabs {} {open
              xywh {0 50 280 185} box UP_BOX labelcolor 32 resizable
            } {
              Fl_Group {} {
                label Files open
                xywh {0 75 280 160} hide resizable
              } {
                Fl_File_Browser {} {
                  callback {nle::FileBrowser* fb = (nle::FileBrowser*)o;
fb->load_rel();}
                  xywh {5 80 270 150} resizable
                  code0 {\#include "FileBrowser.H"}
                  class {nle::FileBrowser}
                }
              }
              Fl_Group {} {
                label {Media Browser} open
                xywh {0 75 280 160} hide
              } {
                Fl_Group {} {open
                  xywh {5 80 270 150} resizable
                  code0 {\#include "MediaPanel.H"}
                  class {nle::MediaPanel}
                } {}
              }
              Fl_Group {} {
                label Effects open
                xywh {0 75 280 160}
              } {
                Fl_Menu_Button m_effectMenu {
                  label {Add Effect} open
                  xywh {5 80 270 25}
                  code0 {\#include "FltkEffectMenu.H"}
                  class {nle::FltkEffectMenu}
                } {}
                Fl_Browser effect_browser {
                  xywh {5 105 270 100} resizable
                  class Fl_Hold_Browser
                }
                Fl_Group {} {open
                  xywh {5 205 270 25}
                } {
                  Fl_Group {} {open
                    xywh {5 205 50 25}
                  } {
                    Fl_Button m_effect_up {
                      label {@8->}
                      callback {m_timelineView->moveEffectUp();}
                      tooltip {Move Up} xywh {5 205 25 25}
                    }
                    Fl_Button m_effect_down {
                      label {@2->}
                      callback {m_timelineView->moveEffectDown();}
                      tooltip {Move Down} xywh {30 205 25 25}
                    }
                  }
                  Fl_Group {} {open
                    xywh {55 205 220 25} resizable
                  } {
                    Fl_Button m_remove_effect {
                      label {Remove Effect}
                      callback {m_timelineView->removeEffect();} selected
                      xywh {55 205 110 25}
                    }
                    Fl_Button m_edit_effect {
                      label {Edit Effect}
                      callback {m_timelineView->editEffect();}
                      xywh {165 205 110 25}
                    }
                  }
                }
              }
            }
            Fl_Input projectNameInput {
              callback {nle::g_loadSaveManager->name( o->value() );}
              xywh {0 25 280 25} box FLAT_BOX color 49 textfont 1
              code0 {\#include "LoadSaveManager/LoadSaveManager.H"}
              code1 {\#include "NoDropInput.H"}
              class NoDropInput
            }
            Fl_Button playButton {
              label {@>}
              callback {if ( strcmp( o->label(), "@>" ) == 0 ) {
	o->label( "@||" );
	lastButton->deactivate();
	firstButton->deactivate();
	forwardButton->deactivate();
	backButton->deactivate();
	m_videoView->play();
} else {
	o->label( "@>" );
	m_videoView->stop();
	lastButton->activate();
	firstButton->activate();
	forwardButton->activate();
	backButton->activate();
}}
              tooltip {Play (F7)} xywh {100 235 80 40} shortcut 0xffc4
            }
            Fl_Button lastButton {
              label {@>|}
              callback {nle::g_ruler->skipLast()}
              tooltip {Goto End} xywh {230 235 50 40}
            }
            Fl_Button firstButton {
              label {@|<}
              callback {nle::g_ruler->skipFirst();}
              tooltip {Goto Start} xywh {0 235 50 40}
            }
            Fl_Button backButton {
              label {@<|}
              callback {nle::g_ruler->skipBackward();}
              tooltip {Skip Frame backwards} xywh {50 235 50 40}
            }
            Fl_Button forwardButton {
              label {@|>}
              callback {nle::g_ruler->skipForward();}
              tooltip {Skip Frame forward} xywh {180 235 50 40}
            }
          }
        }
        Fl_Group {} {open
          xywh {0 275 515 190}
        } {
          Fl_Group {} {open
            xywh {40 275 475 190} resizable
          } {
            Fl_Scrollbar scaleBar {
              callback {Flmm_Scalebar *sb = (Flmm_Scalebar *)o;
float width = sb->w();
float slider_size = sb->slider_size_i();
float zoom = width / slider_size;
m_timelineView->scroll( (int64_t)sb->value() );
m_timelineView->zoom( zoom );}
              private xywh {40 445 455 20} type Horizontal maximum 1024 slider_size 0.40404
              code0 {\#include "Flmm_Scalebar.H"}
              code1 {\#include "globals.H"}
              code2 {using namespace std;}
              class Flmm_Scalebar
            }
            Fl_Group {} {
              xywh {40 275 475 25}
            } {
              Fl_Button {} {
                callback {g_snap = o->value();}
                tooltip Snapping image {/home/oracle/Projekte/OpenME/code/openme-developers/icons/snap.xpm} xywh {40 275 25 25} type Toggle value 1
              }
              Fl_Box {} {
                label Ruler
                xywh {65 275 450 25} box UP_BOX align 16 resizable
                code0 {\#include "Ruler.H"}
                class {nle::Ruler}
              }
            }
            Fl_Scrollbar vScrollBar {
              callback {scroll_area->position( 0, o->value() );}
              xywh {495 300 20 145} maximum 50 slider_size 0.40404
            }
            Fl_Scroll scroll_area {
              callback {cout << "scrollarea" << endl;} open
              xywh {40 300 455 145} when 1 resizable
              code0 {\#include "TimelineScroll.H"}
              class {nle::TimelineScroll}
            } {
              Fl_Group m_timelineView {
                xywh {40 300 455 145}
                code0 {\#include "TimelineView.H"}
                class {nle::TimelineView}
              } {}
            }
          }
          Fl_Group {} {
            xywh {0 275 40 190} labelsize 12
          } {
            Fl_Button positioningButton {
              tooltip {Positioning (S)} image {/home/oracle/Projekte/OpenME/code/openme-developers/icons/tool_positioning.xpm} xywh {0 300 40 40} type Radio shortcut 0x73 value 1 align 16
            }
            Fl_Button automationsButton {
              tooltip {Automations (A)} image {/home/oracle/Projekte/OpenME/code/openme-developers/icons/tool_automations.xpm} xywh {0 340 40 40} type Radio shortcut 0x61 align 18
            }
            Fl_Box {} {
              xywh {0 420 40 5} box THIN_UP_BOX resizable
            }
            Fl_Box {} {
              label Tools
              xywh {0 275 40 25} box UP_BOX labelsize 12
            }
            Fl_Box trashCan {
              private tooltip Trash image {/home/oracle/Projekte/OpenME/code/openme-developers/icons/trash_big.xpm} xywh {0 425 40 40} box UP_BOX
            }
            Fl_Button razorButton {
              tooltip {Split (R)} image {/home/oracle/Projekte/OpenME/code/openme-developers/icons/razor.xpm} xywh {0 380 40 40} type Radio shortcut 0x72 align 18
            }
          }
        }
      }
      Fl_Choice projectChoice {
        callback {char* name = (char*)o->mvalue()->user_data();
nle::g_loadSaveManager->load( name );} open
        xywh {345 0 170 25} down_box BORDER_BOX
        code0 {\#include "LoadSaveManager/LoadSaveManager.H"}
      } {}
    }
  }
  Function {show( int argc, char **argv )} {open
  } {
    code {g_fps = 25.0;
g_backseek = false;
g_scrollBar = scaleBar;
g_trashCan = trashCan;
g_playButton = playButton;
g_firstButton = firstButton;
g_lastButton = lastButton;
g_forwardButton = forwardButton;
g_backButton = backButton;
scaleBar->slider_size_i(300);
mainWindow->show(argc, argv);
projectNameInput->value("Project 1");
g_snap = true;
g_use_jack_transport = true;
g_scrub_audio = true;
g_seek_audio = true;
scroll_area->type(0);
g_v_scrollbar = vScrollBar;} {}
  }
  Function {~NleUI()} {open
  } {
    code {delete mainWindow;} {}
  }
  Function {automationsMode()} {open return_type int
  } {
    code {if ( positioningButton->value() ) {
	return 0;
} else if ( automationsButton->value() ) {
	return 1;
} else {
	return 2;
}} {}
  }
} 

decl {Flmm_Scalebar* g_scrollBar;} {public
} 

class EncodeDialog {} {
  Function {EncodeDialog( nle::IVideoReader*, nle::IAudioReader*, nle::CodecParameters* codecParams )} {open
  } {
    Fl_Window encodeDialog {
      label Render open
      private xywh {372 427 485 340} type Double
      code0 {\#include "IVideoReader.H"}
      code1 {\#include "IAudioReader.H"} modal visible
    } {
      Fl_Return_Button {} {
        label Encode
        callback {//nle::renderMovie();
go = true;
o->window()->hide();}
        xywh {250 300 200 25} hotspot
      }
      Fl_Button {} {
        label Cancel
        callback {go = false;
o->window()->hide();}
        xywh {35 300 200 25}
      }
      Fl_Choice audio_codec_menu {
        label {Audio Codec}
        callback {audio_codec = o->menu()[o->value()].user_data();
m_codecParams->setAudioCodec( (lqt_codec_info_t*)audio_codec );} open
        xywh {145 220 205 25} down_box BORDER_BOX
        code0 {\#include "Codecs.H"}
        code1 {\#include <iostream>}
        code2 {using namespace std;}
      } {}
      Fl_Choice video_codec_menu {
        label {Video Codec}
        callback {video_codec = o->menu()[o->value()].user_data();
m_codecParams->setVideoCodec( (lqt_codec_info_t*)video_codec );} open
        xywh {145 100 205 25} down_box BORDER_BOX
      } {}
      Fl_Choice {} {
        label Samplerate open
        xywh {145 250 205 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label 48000
          xywh {0 0 100 20}
        }
      }
      Fl_Choice {} {
        label Framerate open
        xywh {145 130 205 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label {25 (PAL)}
          xywh {0 0 100 20}
        }
      }
      Fl_Choice frame_size_choice {
        label Framesize open
        xywh {145 160 205 25} down_box BORDER_BOX
      } {
        MenuItem {} {
          label 720x576
          user_data {&fs720x576}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label 360x288
          user_data {&fs360x288}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label 640x480
          user_data {&fs640x480}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label 320x240
          user_data {&fs320x240}
          xywh {0 0 100 20}
        }
      }
      Fl_Box {} {
        label Export
        xywh {0 0 485 35} labelfont 1 labelsize 16
      }
      Fl_Button audio_options {
        label {Options...}
        callback {if ( audio_codec ) {
	Fl_Group::current( encodeDialog );
	CodecOptions dlg;
	dlg.m_audio = true;
	dlg.m_codecParams = m_codecParams;
	nle::setCodecInfo( &dlg, audio_codec );
	dlg.codecOptions->show();
	while (dlg.codecOptions->shown())
		Fl::wait();
}}
        private xywh {355 220 75 25}
      }
      Fl_Button video_options {
        label {Options...}
        callback {if ( video_codec ) {
	Fl_Group::current( encodeDialog );
	CodecOptions dlg;
	dlg.m_audio = false;
	dlg.m_codecParams = m_codecParams;
	nle::setCodecInfo( &dlg, video_codec );
	dlg.codecOptions->show();
	while (dlg.codecOptions->shown())
		Fl::wait();
}}
        private xywh {355 100 75 25}
      }
      Fl_File_Input export_filename {
        label Filename
        xywh {145 35 205 35}
      }
      Fl_Button {} {
        label {File...}
        callback {export_filename->value( fl_file_chooser( "Set Export Filename", 0, 0 ) );}
        xywh {355 45 75 25}
        code0 {\#include <stdlib.h>}
        code1 {\#include <FL/Fl_File_Chooser.H>}
      }
      Fl_Box {} {
        label Video
        xywh {35 95 415 95} box ENGRAVED_FRAME labelfont 1 align 5
      }
      Fl_Box {} {
        label Audio
        xywh {35 215 415 65} box ENGRAVED_FRAME labelfont 1 align 5
      }
    }
    code {m_codecParams = codecParams;} {}
  }
  Function {show()} {} {
    code {audio_codec = 0;
video_codec = 0;
nle::setAudioCodecMenu( audio_codec_menu );
nle::setVideoCodecMenu( video_codec_menu );
encodeDialog->show();} {}
  }
  Function {shown()} {return_type int
  } {
    code {return encodeDialog->shown();} {}
  }
  decl {void *audio_codec;} {}
  decl {void* video_codec;} {}
  decl {bool go;} {public
  }
  Function {~EncodeDialog()} {open
  } {
    code {delete encodeDialog;} {}
  }
  decl {nle::CodecParameters* m_codecParams;} {}
  Function {frameSize()} {open return_type {void*}
  } {
    code {return frame_size_choice->mvalue()->user_data();} {}
  }
} 

class ChangesDialog {} {
  Function {ChangesDialog()} {open
  } {
    Fl_Window {} {
      label {Unsaved changes!} open
      xywh {613 161 410 80} type Double visible
    } {
      Fl_Box {} {
        label {Save changes?}
        xywh {5 10 385 25}
      }
      Fl_Button {} {
        label {Don't Save}
        xywh {5 50 120 25}
      }
      Fl_Button {} {
        label Cancel
        xywh {160 50 120 25}
      }
      Fl_Return_Button {} {
        label Save
        xywh {285 50 120 25}
      }
    }
  }
} 

decl {Fl_Box *g_trashCan} {public
} 

decl {float g_fps} {public
} 

class CodecOptions {open
} {
  Function {CodecOptions()} {open
  } {
    Fl_Window codecOptions {
      label {Codec Options}
      xywh {678 462 345 305} type Double resizable modal visible
    } {
      Fl_Box codec_label {
        label Codec
        xywh {0 0 345 35} labelfont 1 labelsize 16
      }
      Fl_Group {} {open
        xywh {0 35 345 230} resizable
      } {
        Fl_Browser parameters_browser {
          callback {if ( parameters_browser->value() ) {
	nle::setCodecParameter( this, parameters_browser->data( parameters_browser->value() ) );
}}
          xywh {5 40 165 220} resizable
          code0 {\#include <FL/Fl_Hold_Browser.H>}
          class Fl_Hold_Browser
        }
        Fl_Group {} {open
          xywh {170 35 175 230}
        } {
          Fl_Value_Input parameter_int_input {
            callback {nle::ParameterValue val( (int)o->value() );
lqt_parameter_info_t* info = (lqt_parameter_info_t*)parameters_browser->data( parameters_browser->value() );
if ( m_audio ) {
	m_codecParams->setAudioParameter( info->name, val );
} else {
	m_codecParams->setVideoParameter( info->name, val );
}}
            xywh {175 40 165 25} step 1 deactivate
          }
          Fl_Input parameter_string_input {
            callback {nle::ParameterValue val( o->value() );
lqt_parameter_info_t* info = (lqt_parameter_info_t*)parameters_browser->data( parameters_browser->value() );
if ( m_audio ) {
	m_codecParams->setAudioParameter( info->name, val );
} else {
	m_codecParams->setVideoParameter( info->name, val );
}}
            xywh {175 70 165 25} deactivate
          }
          Fl_Choice parameter_stringlist_input {
            callback {nle::ParameterValue val( o->text() );
lqt_parameter_info_t* info = (lqt_parameter_info_t*)parameters_browser->data( parameters_browser->value() );
if ( m_audio ) {
	m_codecParams->setAudioParameter( info->name, val );
} else {
	m_codecParams->setVideoParameter( info->name, val );
}} open
            xywh {175 100 165 25} down_box BORDER_BOX deactivate
          } {}
          Fl_Box {} {
            xywh {230 175 25 25} resizable
          }
        }
      }
      Fl_Group {} {open
        xywh {0 265 345 40}
      } {
        Fl_Button {} {
          label Cancel
          callback {o->window()->hide();}
          xywh {20 275 140 25} hide
        }
        Fl_Return_Button {} {
          label Ok
          callback {o->window()->hide();}
          xywh {20 275 305 25} resizable hotspot
        }
      }
    }
  }
  decl {bool m_audio;} {public
  }
  decl {nle::CodecParameters* m_codecParams;} {public
  }
  Function {~CodecOptions()} {open
  } {
    code {delete codecOptions;} {}
  }
} 

class AboutDialog {open
} {
  Function {AboutDialog()} {open
  } {
    Fl_Window aboutDialog {
      label {About Dialog} open
      xywh {1243 364 340 370} type Double modal visible
    } {
      Fl_Box {} {
        image {/home/oracle/Projekte/OpenME/code/openme-developers/icons/logo.xpm} xywh {0 0 340 155}
      }
      Fl_Box {} {
        label {Open Movie Editor}
        xywh {0 155 340 30} labelfont 1 labelsize 16
      }
      Fl_Box {} {
        label {(C)opyright 2005 Richard Spindler}
        xywh {0 210 340 40} labelsize 12
      }
      Fl_Box version_box {
        label {0.0.0}
        xywh {0 185 340 25} labelfont 1
        code0 {\#include "config.h"}
      }
      Fl_Box {} {
        label {Open Movie Editor is FREE Software (GPL)}
        xywh {0 250 340 25}
      }
      Fl_Box {} {
        label {http://openmovieeditor.sourceforge.net/}
        xywh {0 275 340 25}
      }
      Fl_Return_Button {} {
        label Close
        callback {o->window()->hide();}
        xywh {10 335 320 25} hotspot
      }
    }
    code {version_box->label( VERSION );} {}
  }
  Function {show()} {} {
    code {aboutDialog->show();} {}
  }
  Function {shown()} {return_type int
  } {
    code {return aboutDialog->shown();} {}
  }
  Function {~AboutDialog()} {} {
    code {delete aboutDialog;} {}
  }
} 

decl {Fl_Button* g_playButton;} {public
} 

decl {Fl_Button* g_firstButton;} {public
} 

decl {Fl_Button* g_lastButton;} {public
} 

decl {Fl_Button* g_backButton;} {public
} 

decl {Fl_Button* g_forwardButton;} {public
} 

decl {bool g_snap;} {public
} 

decl {bool g_backseek;} {public
} 

decl {bool g_use_jack_transport;} {public
} 

decl {bool g_scrub_audio;} {public
} 

decl {bool g_seek_audio;} {public
} 

decl {Fl_Scrollbar* g_v_scrollbar;} {public
} 
