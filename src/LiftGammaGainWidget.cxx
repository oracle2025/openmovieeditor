// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "LiftGammaGainWidget.H"

void LiftGammaGainWidget::cb_lift_i(ColorWheel*, void*) {
  m_dialog->read_values();
}
void LiftGammaGainWidget::cb_lift(ColorWheel* o, void* v) {
  ((LiftGammaGainWidget*)(o->parent()))->cb_lift_i(o,v);
}

void LiftGammaGainWidget::cb_gamma_i(ColorWheel*, void*) {
  m_dialog->read_values();
}
void LiftGammaGainWidget::cb_gamma(ColorWheel* o, void* v) {
  ((LiftGammaGainWidget*)(o->parent()))->cb_gamma_i(o,v);
}

void LiftGammaGainWidget::cb_gain_i(ColorWheel*, void*) {
  m_dialog->read_values();
}
void LiftGammaGainWidget::cb_gain(ColorWheel* o, void* v) {
  ((LiftGammaGainWidget*)(o->parent()))->cb_gain_i(o,v);
}

void LiftGammaGainWidget::cb_bypass_i(Fl_Check_Button*, void*) {
  m_dialog->read_values();
}
void LiftGammaGainWidget::cb_bypass(Fl_Check_Button* o, void* v) {
  ((LiftGammaGainWidget*)(o->parent()))->cb_bypass_i(o,v);
}
LiftGammaGainWidget::LiftGammaGainWidget(int X, int Y, int W, int H, const char *L)
  : Fl_Group(X, Y, W, H, L) {
  LiftGammaGainWidget *o = this;
{ ColorWheel* o = lift = new ColorWheel(0, 25, 140, 140);
  o->box(FL_THIN_DOWN_BOX);
  o->color(FL_BACKGROUND_COLOR);
  o->selection_color(FL_BACKGROUND_COLOR);
  o->labeltype(FL_NORMAL_LABEL);
  o->labelfont(0);
  o->labelsize(14);
  o->labelcolor(FL_FOREGROUND_COLOR);
  o->callback((Fl_Callback*)cb_lift);
  o->align(FL_ALIGN_CENTER);
  o->when(FL_WHEN_RELEASE);
}
{ ColorWheel* o = gamma = new ColorWheel(140, 25, 140, 140);
  o->box(FL_THIN_DOWN_BOX);
  o->color(FL_BACKGROUND_COLOR);
  o->selection_color(FL_BACKGROUND_COLOR);
  o->labeltype(FL_NORMAL_LABEL);
  o->labelfont(0);
  o->labelsize(14);
  o->labelcolor(FL_FOREGROUND_COLOR);
  o->callback((Fl_Callback*)cb_gamma);
  o->align(FL_ALIGN_CENTER);
  o->when(FL_WHEN_RELEASE);
}
{ ColorWheel* o = gain = new ColorWheel(280, 25, 140, 140);
  o->box(FL_THIN_DOWN_BOX);
  o->color(FL_BACKGROUND_COLOR);
  o->selection_color(FL_BACKGROUND_COLOR);
  o->labeltype(FL_NORMAL_LABEL);
  o->labelfont(0);
  o->labelsize(14);
  o->labelcolor(FL_FOREGROUND_COLOR);
  o->callback((Fl_Callback*)cb_gain);
  o->align(FL_ALIGN_CENTER);
  o->when(FL_WHEN_RELEASE);
}
{ Fl_Box* o = new Fl_Box(0, 0, 140, 25, "Lift");
  o->box(FL_THIN_UP_BOX);
}
{ Fl_Box* o = new Fl_Box(140, 0, 140, 25, "Gamma");
  o->box(FL_THIN_UP_BOX);
}
{ Fl_Box* o = new Fl_Box(280, 0, 140, 25, "Gain");
  o->box(FL_THIN_UP_BOX);
}
{ Fl_Check_Button* o = bypass = new Fl_Check_Button(0, 165, 420, 25, "Bypass");
  o->down_box(FL_DOWN_BOX);
  o->callback((Fl_Callback*)cb_bypass);
}
end();
}
