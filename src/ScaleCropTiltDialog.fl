# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
header_name {.H} 
code_name {.cxx}
decl {\#include "ScaleCropTiltFilter.H"} {public
} 

decl {\#include "IEffectDialog.H"} {public
} 

class ScaleCropTiltDialog {open : {public nle::IEffectDialog}
} {
  Function {ScaleCropTiltDialog( nle::ScaleCropTiltFilter* filter )} {open
  } {
    Fl_Window m_dialog {
      label {Scale Crop Tilt} open
      xywh {41 452 420 290} type Double visible
    } {
      Fl_Box {} {
        label Scale
        xywh {5 20 410 75} box ENGRAVED_FRAME labelfont 1 align 5
      }
      Fl_Box {} {
        label Crop
        xywh {5 115 410 75} box ENGRAVED_FRAME labelfont 1 align 5
      }
      Fl_Box {} {
        label Tilt
        xywh {5 210 410 75} box ENGRAVED_FRAME labelfont 1 align 5
      }
      Fl_Slider scale_x {
        label {@<->}
        callback {m_filter->m_scale_x = (int)INT_FLOAT_SCALE*o->value();
scale_h_spin->value(100*o->value());

if ( scale_lock->value() ) {
	scale_y->value( o->value() );
	m_filter->m_scale_y = (int)INT_FLOAT_SCALE*o->value();
	scale_v_spin->value(100*o->value());
}

nle::g_videoView->redraw();}
        xywh {35 30 285 25} type {Horz Knob} align 4 minimum -1
        code0 {\#include "int_float_scale.H"}
      }
      Fl_Slider scale_y {
        label {@2<->}
        callback {m_filter->m_scale_y = (int)INT_FLOAT_SCALE*o->value();
scale_v_spin->value(100*o->value());
if ( scale_lock->value() ) {
	scale_x->value( o->value() );
	m_filter->m_scale_x = (int)INT_FLOAT_SCALE*o->value();
	scale_h_spin->value(100*o->value());
}
nle::g_videoView->redraw();}
        xywh {35 60 285 25} type {Horz Knob} align 4 minimum -1
      }
      Fl_Spinner scale_h_spin {
        xywh {320 30 65 25}
      }
      Fl_Spinner scale_v_spin {
        xywh {320 60 65 25}
      }
      Fl_Slider crop_left {
        label {@<->}
        callback {m_filter->m_crop_left = (int)INT_FLOAT_SCALE*o->value();

if ( crop_x_lock->value() ) {
	crop_right->value( o->value() );
	m_filter->m_crop_right = (int)INT_FLOAT_SCALE*o->value();
}

nle::g_videoView->redraw();}
        xywh {35 125 175 25} type {Horz Knob} align 4
      }
      Fl_Slider crop_right {
        callback {m_filter->m_crop_right = (int)INT_FLOAT_SCALE*o->value();
if ( crop_x_lock->value() ) {
	crop_left->value( o->value() );
	m_filter->m_crop_left = (int)INT_FLOAT_SCALE*o->value();
}
nle::g_videoView->redraw();}
        xywh {210 125 175 25} type {Horz Knob} align 4 minimum 1 maximum 0
      }
      Fl_Slider crop_top {
        label {@2<->}
        callback {m_filter->m_crop_top = (int)INT_FLOAT_SCALE*o->value();
if ( crop_y_lock->value() ) {
	crop_bottom->value( o->value() );
	m_filter->m_crop_bottom = (int)INT_FLOAT_SCALE*o->value();
}
nle::g_videoView->redraw();}
        xywh {35 155 175 25} type {Horz Knob} align 4
      }
      Fl_Slider crop_bottom {
        callback {m_filter->m_crop_bottom = (int)INT_FLOAT_SCALE*o->value();
if ( crop_y_lock->value() ) {
	crop_top->value( o->value() );
	m_filter->m_crop_top = (int)INT_FLOAT_SCALE*o->value();
}
nle::g_videoView->redraw();} selected
        xywh {210 155 175 25} type {Horz Knob} align 4 minimum 1 maximum 0
      }
      Fl_Slider tilt_x {
        label {@<->}
        callback {m_filter->m_tilt_x = (int)INT_FLOAT_SCALE*o->value();
nle::g_videoView->redraw();}
        xywh {35 220 305 25} type {Horz Knob} align 4 minimum -1
        code0 {\#include "VideoViewGL.H"}
      }
      Fl_Slider tilt_y {
        label {@2<->}
        callback {m_filter->m_tilt_y = (int)INT_FLOAT_SCALE*o->value();
nle::g_videoView->redraw();}
        xywh {35 250 305 25} type {Horz Knob} align 4 minimum -1
      }
      Fl_Spinner {} {
        xywh {340 220 65 25}
      }
      Fl_Spinner {} {
        xywh {340 250 65 25}
      }
      Fl_Light_Button scale_lock {
        tooltip Connect xywh {390 30 15 55} value 1
      }
      Fl_Light_Button crop_x_lock {
        tooltip Connect xywh {390 125 15 25}
      }
      Fl_Light_Button crop_y_lock {
        tooltip Connect xywh {390 155 15 25}
      }
    }
    code {m_filter = filter;} {}
  }
  Function {~ScaleCropTiltDialog()} {open
  } {
    code {m_dialog->hide();
delete m_dialog;} {}
  }
  Function {show()} {open return_type void
  } {
    code {m_dialog->show();} {}
  }
  Function {shown()} {open return_type int
  } {
    code {return m_dialog->shown();} {}
  }
  decl {nle::ScaleCropTiltFilter* m_filter;} {}
} 
