// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "OggDialog.H"

Fl_Menu_Item OggDialog::menu_Resolution[] = {
 {"640x480", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"768x576", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void OggDialog::cb_Cancel_i(Fl_Button* o, void*) {
  o->window()->hide();
}
void OggDialog::cb_Cancel(Fl_Button* o, void* v) {
  ((OggDialog*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void OggDialog::cb_Encode_i(Fl_Return_Button* o, void*) {
  m_go = true;
o->window()->hide();
}
void OggDialog::cb_Encode(Fl_Return_Button* o, void* v) {
  ((OggDialog*)(o->parent()->user_data()))->cb_Encode_i(o,v);
}

Fl_Menu_Item OggDialog::menu_Folder[] = {
 {"~/", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"~/Desktop", 0,  0, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Favorites", 0,  0, 0, 128, FL_NORMAL_LABEL, 1, 14, 0},
 {"Recently used", 0,  0, 0, 128, FL_NORMAL_LABEL, 1, 14, 0},
 {"Select ...", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

OggDialog::OggDialog() {
  { dialog_window = new Fl_Double_Window(485, 405, "Ogg Vorbis/Theora Encoder");
    dialog_window->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(0, 0, 485, 55, "Ogg Vorbis/Theora Encoder");
      o->labelfont(1);
      o->labelsize(16);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(10, 215, 460, 45, "Vorbis Audio");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { audioqualityslider = new Fl_Value_Slider(110, 225, 270, 25, "Quality");
      audioqualityslider->type(5);
      audioqualityslider->maximum(10);
      audioqualityslider->step(1);
      audioqualityslider->value(3);
      audioqualityslider->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Value_Slider* audioqualityslider
    { new Fl_Button(380, 225, 80, 25, "Default");
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(10, 285, 460, 75, "Theora Video");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { videoqualityslider = new Fl_Value_Slider(110, 295, 270, 25, "Quality");
      videoqualityslider->type(5);
      videoqualityslider->maximum(63);
      videoqualityslider->step(1);
      videoqualityslider->value(10);
      videoqualityslider->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Value_Slider* videoqualityslider
    { new Fl_Button(380, 295, 80, 25, "Default");
    } // Fl_Button* o
    { Fl_Choice* o = new Fl_Choice(110, 325, 270, 25, "Resolution");
      o->down_box(FL_BORDER_BOX);
      o->menu(menu_Resolution);
    } // Fl_Choice* o
    { Fl_Box* o = new Fl_Box(10, 70, 460, 120, "File");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { filenameinput = new Fl_File_Input(110, 145, 270, 35, "Filename");
    } // Fl_File_Input* filenameinput
    { new Fl_Button(380, 155, 80, 25, "...");
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(10, 370, 225, 25, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { Fl_Return_Button* o = new Fl_Return_Button(245, 370, 225, 25, "Encode");
      o->callback((Fl_Callback*)cb_Encode);
    } // Fl_Return_Button* o
    { new Fl_Input(110, 85, 275, 25, "Name");
    } // Fl_Input* o
    { Fl_Box* o = new Fl_Box(385, 85, 80, 25, ".ogg");
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Choice* o = new Fl_Choice(110, 115, 275, 25, "Folder");
      o->down_box(FL_BORDER_BOX);
      o->menu(menu_Folder);
    } // Fl_Choice* o
    dialog_window->end();
  } // Fl_Double_Window* dialog_window
  m_go = false;
}

OggDialog::~OggDialog() {
  delete dialog_window;
}

void OggDialog::show() {
  dialog_window->show();
}

int OggDialog::shown() {
  return dialog_window->shown();
}

bool OggDialog::go() {
  return m_go;
}

nle::IVideoFileWriter* OggDialog::getFileWriter() {
  nle::FileWriterOgg* file_writer = new nle::FileWriterOgg( filenameinput->value() );
  if ( file_writer->ok() ) {
  	file_writer->videoQuality( videoqualityslider->value() );
  	file_writer->audioQuality( audioqualityslider->value() );
  	file_writer->resolution( 640, 480 );
  	file_writer->done();
  	return file_writer;
  } else {
  	return 0;
  }
}
