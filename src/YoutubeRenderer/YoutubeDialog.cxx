// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "YoutubeDialog.H"

void YoutubeDialog::cb_Cancel_i(Fl_Button*, void*) {
  m_go = false;
}
void YoutubeDialog::cb_Cancel(Fl_Button* o, void* v) {
  ((YoutubeDialog*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void YoutubeDialog::cb_Go_i(Fl_Return_Button* o, void*) {
  //Check emptiness of fields
//Get Auth from nle::YoutubeUploader::login()
//then close, and set go to true
if ( name_input->size() == 0 ) {
	fl_alert( "Please enter a name for your video!" );
	return;
}
if ( description_input->size() == 0 ) {
	fl_alert( "Please enter a description for your video!" );
	return;
}
if ( username_input->size() == 0 ) {
	fl_alert( "Please enter your Youtube username!" );
	return;
}
if ( password_input->size() == 0 ) {
	fl_alert( "Please enter your Youtube password!" );
	return;
}
m_uploader->setTitle( name_input->value() );
m_uploader->setDescription( description_input->value() );
m_uploader->setKeywords( tags_input->value() );
const char* username  = username_input->value();
const char* password  = password_input->value();
if ( m_uploader->login( username, password ) ) {
	m_go = true;
	o->window()->hide();
} else {
	fl_alert( "Could not authenticate against Youtube Login\nPlease check your username and password!" );
};
}
void YoutubeDialog::cb_Go(Fl_Return_Button* o, void* v) {
  ((YoutubeDialog*)(o->parent()->user_data()))->cb_Go_i(o,v);
}

YoutubeDialog::YoutubeDialog(nle::YoutubeUploader* uploader) {
  { dialog_window = new Fl_Double_Window(570, 420, "Upload to Youtube");
    dialog_window->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(0, 0, 570, 50, "Upload to Youtube");
      o->labelfont(1);
      o->labelsize(17);
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(10, 385, 270, 25, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { Fl_Return_Button* o = new Fl_Return_Button(290, 385, 270, 25, "Go");
      o->callback((Fl_Callback*)cb_Go);
    } // Fl_Return_Button* o
    { Fl_Box* o = new Fl_Box(10, 185, 270, 190, "@>");
      o->box(FL_DOWN_BOX);
      o->labelsize(89);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(10, 70, 270, 105, "Youtube Login");
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Box* o
    { username_input = new Fl_Input(115, 80, 155, 25, "Username");
    } // Fl_Input* username_input
    { password_input = new Fl_Input(115, 110, 155, 25, "Password");
      password_input->type(5);
    } // Fl_Input* password_input
    { remember_login_check_button = new Fl_Check_Button(115, 140, 155, 25, "Remember Login");
      remember_login_check_button->down_box(FL_DOWN_BOX);
      remember_login_check_button->deactivate();
    } // Fl_Check_Button* remember_login_check_button
    { name_input = new Fl_Input(290, 70, 270, 25, "Name");
      name_input->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Input* name_input
    { description_input = new Fl_Input(290, 120, 270, 155, "Description");
      description_input->type(4);
      description_input->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Input* description_input
    { tags_input = new Fl_Input(290, 350, 270, 25, "Tags");
      tags_input->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Input* tags_input
    { Fl_Choice* o = new Fl_Choice(290, 300, 270, 25, "Category");
      o->down_box(FL_BORDER_BOX);
      o->align(FL_ALIGN_TOP_LEFT);
      o->deactivate();
    } // Fl_Choice* o
    dialog_window->set_modal();
    dialog_window->end();
  } // Fl_Double_Window* dialog_window
  m_go = false;
m_uploader = uploader;
}

YoutubeDialog::~YoutubeDialog() {
  delete dialog_window;
}

void YoutubeDialog::show() {
  dialog_window->show();
}

int YoutubeDialog::shown() {
  return dialog_window->shown();
}

const char* YoutubeDialog::getName() {
  return name_input->value();
}

const char* YoutubeDialog::getDescription() {
  return description_input->value();
}

const char* YoutubeDialog::getTags() {
  return tags_input->value();
}

bool YoutubeDialog::go() {
  return m_go;
}

void YoutubeProgressDialog::cb_Cancel1_i(Fl_Button*, void*) {
  m_cancel = true;
}
void YoutubeProgressDialog::cb_Cancel1(Fl_Button* o, void* v) {
  ((YoutubeProgressDialog*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

YoutubeProgressDialog::YoutubeProgressDialog() {
  { dialog_window = new Fl_Double_Window(365, 155, "Progress");
    dialog_window->user_data((void*)(this));
    { encoding_progress = new Fl_Progress(10, 50, 345, 25, "Encoding");
    } // Fl_Progress* encoding_progress
    { uploading_progress = new Fl_Progress(10, 85, 345, 25, "Uploading");
    } // Fl_Progress* uploading_progress
    { Fl_Button* o = new Fl_Button(10, 120, 345, 25, "Cancel");
      o->callback((Fl_Callback*)cb_Cancel1);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(0, 0, 365, 40, "Youtube Upload in Progress");
      o->labelfont(1);
      o->labelsize(15);
    } // Fl_Box* o
    dialog_window->set_modal();
    dialog_window->end();
  } // Fl_Double_Window* dialog_window
  encoding_progress->minimum( 0.0 );
encoding_progress->maximum( 1.0 );
encoding_progress->value( 0.0 );
uploading_progress->minimum( 0.0 );
uploading_progress->maximum( 1.0 );
uploading_progress->value( 0.0 );
m_current_progress = encoding_progress;
}

YoutubeProgressDialog::~YoutubeProgressDialog() {
  delete dialog_window;
}

void YoutubeProgressDialog::show() {
  dialog_window->show();
}

int YoutubeProgressDialog::shown() {
  return dialog_window->shown();
}

bool YoutubeProgressDialog::progress( double percent ) {
  //timeval now;
//gettimeofday( &now, 0 );
//double elapsed = (now.tv_sec - m_start.tv_sec) + ( (now.tv_usec - m_start.tv_usec) * (1.0 / CLOCKS_PER_SEC) );
//double remaining = elapsed / progress_bar->value() - elapsed + 1.0f;
//int es, em, eh, rs, rm, rh;

//nle::secs2HMS( elapsed, eh, em, es );
//nle::secs2HMS( remaining, rh, rm, rs );

//char buf[128];
//sprintf( buf, "Elapsed Time: %03d:%02d:%02d Remaining Time: %03d:%02d:%02d", eh, em, es, rh, rm, rs );

m_current_progress->value( percent );
//time_display->value( buf );
Fl::check();
return m_cancel;
}

void YoutubeProgressDialog::start() {
  m_cancel = false;
//dialog_window->show();
gettimeofday( &m_start, 0 );
}

void YoutubeProgressDialog::end() {
  //dialog_window->hide();
}

void YoutubeProgressDialog::activateEncodingProgress() {
  m_current_progress = encoding_progress;
}

void YoutubeProgressDialog::activateUploadingProgress() {
  m_current_progress = uploading_progress;
}
