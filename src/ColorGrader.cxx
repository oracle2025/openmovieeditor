// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "ColorGrader.h"

void ColorGrader::cb_r_contrast_slider_i(Fl_Slider* o, void*) {
  if ( contrast_combine->value() ) {
	g_contrast_slider->value( o->value() );
	b_contrast_slider->value( o->value() );
}

contrast_view->contrast( r_contrast_slider->value(),
	g_contrast_slider->value(),
	b_contrast_slider->value() );
combine_curve();
}
void ColorGrader::cb_r_contrast_slider(Fl_Slider* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_r_contrast_slider_i(o,v);
}

void ColorGrader::cb_g_contrast_slider_i(Fl_Slider* o, void*) {
  if ( contrast_combine->value() ) {
	r_contrast_slider->value( o->value() );
	b_contrast_slider->value( o->value() );
}
contrast_view->contrast( r_contrast_slider->value(),
	g_contrast_slider->value(),
	b_contrast_slider->value() );
combine_curve();
}
void ColorGrader::cb_g_contrast_slider(Fl_Slider* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_g_contrast_slider_i(o,v);
}

void ColorGrader::cb_b_contrast_slider_i(Fl_Slider* o, void*) {
  if ( contrast_combine->value() ) {
	r_contrast_slider->value( o->value() );
	g_contrast_slider->value( o->value() );
}
contrast_view->contrast( r_contrast_slider->value(),
	g_contrast_slider->value(),
	b_contrast_slider->value() );
combine_curve();
}
void ColorGrader::cb_b_contrast_slider(Fl_Slider* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_b_contrast_slider_i(o,v);
}

void ColorGrader::cb_r_gamma_slider_i(Fl_Slider* o, void*) {
  if ( gamma_combine->value() ) {
	g_gamma_slider->value( o->value() );
	b_gamma_slider->value( o->value() );
}
gamma_view->gamma( r_gamma_slider->value(),
	g_gamma_slider->value(),
	b_gamma_slider->value() );
combine_curve();
}
void ColorGrader::cb_r_gamma_slider(Fl_Slider* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_r_gamma_slider_i(o,v);
}

void ColorGrader::cb_g_gamma_slider_i(Fl_Slider* o, void*) {
  if ( gamma_combine->value() ) {
	r_gamma_slider->value( o->value() );
	b_gamma_slider->value( o->value() );
}
gamma_view->gamma( r_gamma_slider->value(),
	g_gamma_slider->value(),
	b_gamma_slider->value() );
combine_curve();
}
void ColorGrader::cb_g_gamma_slider(Fl_Slider* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_g_gamma_slider_i(o,v);
}

void ColorGrader::cb_b_gamma_slider_i(Fl_Slider* o, void*) {
  if ( gamma_combine->value() ) {
	r_gamma_slider->value( o->value() );
	g_gamma_slider->value( o->value() );
}
gamma_view->gamma( r_gamma_slider->value(),
	g_gamma_slider->value(),
	b_gamma_slider->value() );
combine_curve();
}
void ColorGrader::cb_b_gamma_slider(Fl_Slider* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_b_gamma_slider_i(o,v);
}

void ColorGrader::cb__i(Fl_Button*, void*) {
  r_contrast_slider->value(0);
recalc_sliders();
}
void ColorGrader::cb_(Fl_Button* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb__i(o,v);
}

void ColorGrader::cb_1_i(Fl_Button*, void*) {
  g_contrast_slider->value(0);
recalc_sliders();
}
void ColorGrader::cb_1(Fl_Button* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_1_i(o,v);
}

void ColorGrader::cb_2_i(Fl_Button*, void*) {
  b_contrast_slider->value(0);
recalc_sliders();
}
void ColorGrader::cb_2(Fl_Button* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_2_i(o,v);
}

void ColorGrader::cb_3_i(Fl_Button*, void*) {
  r_brightness_slider->value(0);
recalc_sliders();
}
void ColorGrader::cb_3(Fl_Button* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_3_i(o,v);
}

void ColorGrader::cb_4_i(Fl_Button*, void*) {
  g_brightness_slider->value(0);
recalc_sliders();
}
void ColorGrader::cb_4(Fl_Button* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_4_i(o,v);
}

void ColorGrader::cb_5_i(Fl_Button*, void*) {
  b_brightness_slider->value(0);
recalc_sliders();
}
void ColorGrader::cb_5(Fl_Button* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_5_i(o,v);
}

void ColorGrader::cb_6_i(Fl_Button*, void*) {
  r_gamma_slider->value(0.25);
recalc_sliders();
}
void ColorGrader::cb_6(Fl_Button* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_6_i(o,v);
}

void ColorGrader::cb_7_i(Fl_Button*, void*) {
  g_gamma_slider->value(0.25);
recalc_sliders();
}
void ColorGrader::cb_7(Fl_Button* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_7_i(o,v);
}

void ColorGrader::cb_8_i(Fl_Button*, void*) {
  b_gamma_slider->value(0.25);
recalc_sliders();
}
void ColorGrader::cb_8(Fl_Button* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_8_i(o,v);
}

void ColorGrader::cb_r_brightness_slider_i(Fl_Slider* o, void*) {
  if ( brightness_combine->value() ) {
	g_brightness_slider->value( o->value() );
	b_brightness_slider->value( o->value() );
}
brightness_view->brightness( r_brightness_slider->value(),
	g_brightness_slider->value(),
	b_brightness_slider->value() );
combine_curve();
}
void ColorGrader::cb_r_brightness_slider(Fl_Slider* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_r_brightness_slider_i(o,v);
}

void ColorGrader::cb_g_brightness_slider_i(Fl_Slider* o, void*) {
  if ( brightness_combine->value() ) {
	r_brightness_slider->value( o->value() );
	b_brightness_slider->value( o->value() );
}
brightness_view->brightness( r_brightness_slider->value(),
	g_brightness_slider->value(),
	b_brightness_slider->value() );
combine_curve();
}
void ColorGrader::cb_g_brightness_slider(Fl_Slider* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_g_brightness_slider_i(o,v);
}

void ColorGrader::cb_b_brightness_slider_i(Fl_Slider* o, void*) {
  if ( brightness_combine->value() ) {
	r_brightness_slider->value( o->value() );
	g_brightness_slider->value( o->value() );
}
brightness_view->brightness( r_brightness_slider->value(),
	g_brightness_slider->value(),
	b_brightness_slider->value() );
combine_curve();
}
void ColorGrader::cb_b_brightness_slider(Fl_Slider* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_b_brightness_slider_i(o,v);
}

void ColorGrader::cb_Bypass_i(Fl_Check_Button* o, void*) {
  if ( o->value() ) {
	for (int i=0; i<256; ++i) {
		m_values_r[i] = i;
		m_values_g[i] = i;
		m_values_b[i] = i;
	}
	nle::g_videoView->redraw();
} else {
	combine_curve();
};
}
void ColorGrader::cb_Bypass(Fl_Check_Button* o, void* v) {
  ((ColorGrader*)(o->parent()))->cb_Bypass_i(o,v);
}
ColorGrader::ColorGrader(int X, int Y, int W, int H, const char *L)
  : Fl_Group(X, Y, W, H, L) {
  //ColorGrader *o = this;
{ Fl_Slider* o = r_contrast_slider = new Fl_Slider(20, 25, 145, 25, "R");
  o->type(5);
  o->color((Fl_Color)9);
  o->minimum(-256);
  o->maximum(256);
  o->callback((Fl_Callback*)cb_r_contrast_slider);
  o->align(FL_ALIGN_LEFT);
}
{ Fl_Slider* o = g_contrast_slider = new Fl_Slider(20, 50, 145, 25, "G");
  o->type(5);
  o->color((Fl_Color)10);
  o->minimum(-256);
  o->maximum(256);
  o->callback((Fl_Callback*)cb_g_contrast_slider);
  o->align(FL_ALIGN_LEFT);
}
{ Fl_Slider* o = b_contrast_slider = new Fl_Slider(20, 75, 145, 25, "B");
  o->type(5);
  o->color((Fl_Color)12);
  o->minimum(-256);
  o->maximum(256);
  o->callback((Fl_Callback*)cb_b_contrast_slider);
  o->align(FL_ALIGN_LEFT);
}
{ Fl_Light_Button* o = contrast_combine = new Fl_Light_Button(20, 5, 145, 20, "Combine Contrast");
  o->value(1);
  o->labelsize(12);
}
{ CurveViewRGB* o = contrast_view = new CurveViewRGB(180, 5, 95, 95, "Contrast");
  o->box(FL_DOWN_BOX);
  o->color(FL_BACKGROUND_COLOR);
  o->selection_color(FL_BACKGROUND_COLOR);
  o->labeltype(FL_NORMAL_LABEL);
  o->labelfont(0);
  o->labelsize(12);
  o->labelcolor(FL_FOREGROUND_COLOR);
  o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
  o->when(FL_WHEN_RELEASE);
}
{ Fl_Light_Button* o = brightness_combine = new Fl_Light_Button(20, 105, 145, 20, "Combine Brightness");
  o->value(1);
  o->labelsize(12);
}
{ CurveViewRGB* o = brightness_view = new CurveViewRGB(180, 105, 95, 95, "Brightness");
  o->box(FL_DOWN_BOX);
  o->color(FL_BACKGROUND_COLOR);
  o->selection_color(FL_BACKGROUND_COLOR);
  o->labeltype(FL_NORMAL_LABEL);
  o->labelfont(0);
  o->labelsize(12);
  o->labelcolor(FL_FOREGROUND_COLOR);
  o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
  o->when(FL_WHEN_RELEASE);
}
{ Fl_Slider* o = r_gamma_slider = new Fl_Slider(20, 225, 145, 25, "R");
  o->type(5);
  o->color((Fl_Color)9);
  o->value(0.25);
  o->callback((Fl_Callback*)cb_r_gamma_slider);
  o->align(FL_ALIGN_LEFT);
}
{ Fl_Slider* o = g_gamma_slider = new Fl_Slider(20, 250, 145, 25, "G");
  o->type(5);
  o->color((Fl_Color)10);
  o->value(0.25);
  o->callback((Fl_Callback*)cb_g_gamma_slider);
  o->align(FL_ALIGN_LEFT);
}
{ Fl_Slider* o = b_gamma_slider = new Fl_Slider(20, 275, 145, 25, "B");
  o->type(5);
  o->color((Fl_Color)12);
  o->value(0.25);
  o->callback((Fl_Callback*)cb_b_gamma_slider);
  o->align(FL_ALIGN_LEFT);
}
{ Fl_Light_Button* o = gamma_combine = new Fl_Light_Button(20, 205, 145, 20, "Combine Gamma");
  o->value(1);
  o->labelsize(12);
}
{ CurveViewRGB* o = gamma_view = new CurveViewRGB(180, 205, 95, 95, "Gamma");
  o->box(FL_DOWN_BOX);
  o->color(FL_BACKGROUND_COLOR);
  o->selection_color(FL_BACKGROUND_COLOR);
  o->labeltype(FL_NORMAL_LABEL);
  o->labelfont(0);
  o->labelsize(12);
  o->labelcolor(FL_FOREGROUND_COLOR);
  o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
  o->when(FL_WHEN_RELEASE);
}
{ Fl_Button* o = new Fl_Button(165, 25, 15, 25);
  o->tooltip("Reset");
  o->callback((Fl_Callback*)cb_);
}
{ Fl_Button* o = new Fl_Button(165, 50, 15, 25);
  o->tooltip("Reset");
  o->callback((Fl_Callback*)cb_1);
}
{ Fl_Button* o = new Fl_Button(165, 75, 15, 25);
  o->tooltip("Reset");
  o->callback((Fl_Callback*)cb_2);
}
{ Fl_Button* o = new Fl_Button(165, 125, 15, 25);
  o->tooltip("Reset");
  o->callback((Fl_Callback*)cb_3);
}
{ Fl_Button* o = new Fl_Button(165, 150, 15, 25);
  o->tooltip("Reset");
  o->callback((Fl_Callback*)cb_4);
}
{ Fl_Button* o = new Fl_Button(165, 175, 15, 25);
  o->tooltip("Reset");
  o->callback((Fl_Callback*)cb_5);
}
{ Fl_Button* o = new Fl_Button(165, 225, 15, 25);
  o->tooltip("Reset");
  o->callback((Fl_Callback*)cb_6);
}
{ Fl_Button* o = new Fl_Button(165, 250, 15, 25);
  o->tooltip("Reset");
  o->callback((Fl_Callback*)cb_7);
}
{ Fl_Button* o = new Fl_Button(165, 275, 15, 25);
  o->tooltip("Reset");
  o->callback((Fl_Callback*)cb_8);
}
{ CurveViewRGB* o = combined_view = new CurveViewRGB(280, 5, 145, 145, "Combined");
  o->box(FL_DOWN_BOX);
  o->color(FL_BACKGROUND_COLOR);
  o->selection_color(FL_BACKGROUND_COLOR);
  o->labeltype(FL_NORMAL_LABEL);
  o->labelfont(0);
  o->labelsize(14);
  o->labelcolor(FL_FOREGROUND_COLOR);
  o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
  o->when(FL_WHEN_RELEASE);
}
{ ColorWheel* o = new ColorWheel(280, 155, 145, 145, "Color Wheel");
  o->box(FL_DOWN_BOX);
  o->color(FL_BACKGROUND_COLOR);
  o->selection_color(FL_BACKGROUND_COLOR);
  o->labeltype(FL_NORMAL_LABEL);
  o->labelfont(0);
  o->labelsize(14);
  o->labelcolor(FL_FOREGROUND_COLOR);
  o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
  o->when(FL_WHEN_RELEASE);
}
{ Fl_Slider* o = r_brightness_slider = new Fl_Slider(20, 125, 145, 25, "R");
  o->type(5);
  o->color((Fl_Color)9);
  o->minimum(-256);
  o->maximum(256);
  o->callback((Fl_Callback*)cb_r_brightness_slider);
  o->align(FL_ALIGN_LEFT);
}
{ Fl_Slider* o = g_brightness_slider = new Fl_Slider(20, 150, 145, 25, "G");
  o->type(5);
  o->color((Fl_Color)10);
  o->minimum(-256);
  o->maximum(256);
  o->callback((Fl_Callback*)cb_g_brightness_slider);
  o->align(FL_ALIGN_LEFT);
}
{ Fl_Slider* o = b_brightness_slider = new Fl_Slider(20, 175, 145, 25, "B");
  o->type(5);
  o->color((Fl_Color)12);
  o->minimum(-256);
  o->maximum(256);
  o->callback((Fl_Callback*)cb_b_brightness_slider);
  o->align(FL_ALIGN_LEFT);
}
{ Fl_Check_Button* o = new Fl_Check_Button(20, 305, 145, 25, "Bypass");
  o->down_box(FL_DOWN_BOX);
  o->callback((Fl_Callback*)cb_Bypass);
}
end();
}

void ColorGrader::combine_curve() {
  int i;
unsigned char *lut = combined_view->m_values_r;
unsigned char *contrast = contrast_view->m_values_r;
unsigned char *brightness = brightness_view->m_values_r;
unsigned char *gamma = gamma_view->m_values_r;
for (i=0; i<256; ++i) {
	lut[i] = gamma[brightness[contrast[i]]];
	m_values_r[i] = lut[i];
}
lut = combined_view->m_values_g;
contrast = contrast_view->m_values_g;
brightness = brightness_view->m_values_g;
gamma = gamma_view->m_values_g;
for (i=0; i<256; ++i) {
	lut[i] = gamma[brightness[contrast[i]]];
	m_values_g[i] = lut[i];
}
lut = combined_view->m_values_b;
contrast = contrast_view->m_values_b;
brightness = brightness_view->m_values_b;
gamma = gamma_view->m_values_b;
for (i=0; i<256; ++i) {
	lut[i] = gamma[brightness[contrast[i]]];
	m_values_b[i] = lut[i];
}
combined_view->redraw();
nle::g_videoView->redraw();
}

void ColorGrader::recalc_sliders() {
  contrast_view->contrast( r_contrast_slider->value(),
	g_contrast_slider->value(),
	b_contrast_slider->value() );
brightness_view->brightness( r_brightness_slider->value(),
	g_brightness_slider->value(),
	b_brightness_slider->value() );
gamma_view->gamma( r_gamma_slider->value(),
	g_gamma_slider->value(),
	b_gamma_slider->value() );
combine_curve();
}
